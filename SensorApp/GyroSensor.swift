//
//  GyroSensor.swift
//  SensorApp
//
//  Copyright © 2016 Zühlke Engineering AG. All rights reserved.
//

import CoreMotion

/**
 The purpose of the `GyroSensor` class is to provide the data that is generated by the gyro of the device.
 For details of this sensor see https://en.wikipedia.org/wiki/Gyroscope
 
 The `GyroSensor` class is a subclass of the `AbstractSensor`, and it conforms to the `DeviceSensor` protocol.
 */
class GyroSensor: AbstractSensor, DeviceSensor {

    fileprivate weak var manager : CMMotionManager?
    
    /// A Bool that indicates that the gyro is available on the device
    var isAvailable : Bool{
        
        get{
            guard let manager = manager else {return false}
            return manager.isGyroAvailable
        }
    }
    
    /// The type of class is Gyrometer.
    var type : SensorType {
        get{
            return .Gyrometer
        }
    }
    
    /**
     Public initializer that takes `CMMotionManager` and `FileWriterService` as an argument.
     `CMMotionManager` must be injected because Apple recommends to have only one instance of it for performance reasons as it is used in multiple sensor classes.
     `FileWriterService` is used to save the measured results.
     */
    init(motionManager: CMMotionManager, fileWriterService: FileWriterService) {
        super.init(fileWriterService: fileWriterService, deviceType: .Gyrometer)
        manager = motionManager
    }
    
    /**
     Method to start the reporting of sensor data. The data is read with the interval specified by `gyroUpdateInterval`
     */
    func startReporting(){
        
        guard isAvailable else {
            print("GyroSensor not available")
            return
        }
        guard let manager = manager else {return }
        
        _isReporting = true
        
        manager.gyroUpdateInterval = 0.1
        
        manager.startGyroUpdates(to: OperationQueue()) { (data: CMGyroData?, error: Error?) in
            self.persistData(data)
        }
    }
    
    ///method that writes the data from the sensor into a dictionary structur for later JSON generation
    fileprivate func persistData(_ data: CMGyroData?){
    
        guard let data = data else {return}
        
        var params = [String:AnyObject]()
        params["type"] = "Gyro" as AnyObject?
        params["date"] = dateFormatter.string(from: Date()) as AnyObject?
        params["x"] = data.rotationRate.x as AnyObject?
        params["y"] = data.rotationRate.y as AnyObject?
        params["z"] = data.rotationRate.z as AnyObject?
        
        fileWriter?.addLine(params)
    }
    
    ///method that stops sensor reading and generation of data
    func stopReporting(){
        guard let manager = manager else {return }
        manager.stopGyroUpdates()
        _isReporting = false
    }
    
}
